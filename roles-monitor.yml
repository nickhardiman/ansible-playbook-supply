

# create a few variables like "volume_image_file_exists"
- name: Add image facts to hostvars
  hosts: monitor
  become: true
  gather_facts: false
  roles:
    - name: "check for existing images"
      role: nick.platform.libvirt_image_facts
      delegate_to: "{{ groups['hypervisor'][0] }}"


# If there is no base file, assume configuration didn't complete and 
# we are good to go again.
- name: Configure new server machine
  hosts: monitor
  become: true
  gather_facts: false
  serial: 1
  vars_files:
    - ~/vault-credentials.yml
  # !!! insights-client fails with proxy vars
  # environment:
  #   http_proxy: "http://gateway.{{ lab_supply_domain }}:3128"
  #   HTTPS_PROXY: "http://gateway.{{ lab_supply_domain }}:3128"
  #   no_proxy: localhost,127.0.0.1,example.com
  #
  pre_tasks:
    - name: "If base image exists, stop play here"
      ansible.builtin.meta: end_host
      when: volume_base_file_exists
    - ansible.builtin.setup:
  #
  roles:
    - role: nick.platform.managed_node
    - name: "update /etc/hosts with gateway address"
      role: nick.platform.hosts_record
      # !!! hardcoded
      vars:
        h_ip_address: "{{ lab_supply_net_prefix }}.3"
        h_fqdn: "gateway.{{ lab_supply_domain }}"
        h_host: gateway
    - role: nick.platform.server_cert
    - role: nick.platform.dns_client_of_id
    - role: nick.platform.dns_record
      vars:
        # Create a DNS A record like "myhost IN A 192.168.123.45"
        # Create a DNS PTR record like "45 IN PTR myhost.mydomain.example.com."
        record_a_name: "{{ inventory_hostname | regex_replace( '.' + lab_supply_domain) }}"
        record_a_value: "{{ nics[0]['ip'] }}"
        record_ptr_name: "{{ nics[0]['ip'].split('.')[3] }}"
        record_ptr_value: "{{ inventory_hostname + '.' }}"
    - role: nick.platform.satellite_repo_consumer
      vars:
        activationkey: ak-build-rhel-9
    - role: nick.platform.latest_packages
    - role: ipaclient
      vars:
        ipaadmin_principal: admin
        ipaadmin_password:  "{{ default_password }}" 
        ipaclient_domain: build.example.com
        state: present
    - role: nick.platform.cockpit_server
    - role: nick.platform.insights_client
    - role: nick.platform.smtp_client
    # !!! deprecated
    # https://github.com/cloudalchemy/ansible-prometheus
    # try
    # https://github.com/prometheus-community/ansible
    # https://www.ansible.com/blog/red-hat-ansible-tower-monitoring-using-prometheus-node-exporter-grafana
    # https://www.padok.fr/en/blog/prometheus-monitoring-ansible
    # - role: cloudalchemy.prometheus
    #   vars:
    #     prometheus_version: latest
    # !!! deprecated
    # https://github.com/cloudalchemy/ansible-grafana
    # try 
    # https://github.com/grafana/grafana-ansible-collection
    # - role: cloudalchemy.grafana
    #   vars:
    #     grafana_security:
    #       admin_user: admin
    #       admin_password: redhat
    #     grafana_datasources:
    #       - name: prometheus
    #         type: prometheus
    #         access: proxy
    #         url: 'http://localhost:9090'
    #         basicAuth: false

  tasks: 

# firewall
  # open port 9090 for prometheus
  # open port 3000 for grafana
  #
  # - name: permit service traffic
  #   ansible.posix.firewalld:
  #     service: "{{ item }}"
  #     immediate: yes
  #     permanent: yes
  #     state: enabled
  #   loop: 
  #   - grafana
  #   - prometheus


- name: Roles that need the proxy
  hosts: monitor
  become: true
  gather_facts: false
  serial: 1
  vars_files:
    - ~/vault-credentials.yml
  environment:
    http_proxy: "http://gateway.{{ lab_supply_domain }}:3128"
    HTTPS_PROXY: "http://gateway.{{ lab_supply_domain }}:3128"
    no_proxy: localhost,127.0.0.1,example.com
  roles:
    - role: nick.platform.elk_server



# test
# prometheus - no password
# curl http://monitor.lab.example.com:9090/
# grafana - admin/redhat (see grafana_security above)
# curl http://monitor.lab.example.com:3000/
# ELK - elastic API
# http://monitor.lab.example.com:9200/
# ELK - kibana
# http://monitor.lab.example.com:5601/


