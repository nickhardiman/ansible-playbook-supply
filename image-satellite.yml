---
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_networking_infrastructure_services/providing-dhcp-services_networking-infrastructure-services#doc-wrapper

# The "satellite" machine has one interface on the private libvirt network.
# It uses gateway as a web proxy.
# it provides host provisioning, content management and scanning.

# Use a kickstart file to install and configure the OS.

# !!! server cert is missing key usage fields. 
# error:
# Checking Key Usage extension on certificate for Key Encipherment 
# [FAIL]
# The /etc/pki/tls/certs/satellite.build.example.com.pem does not allow for the 'Key Encipherment' key usage.
# info:
# "ERR_SSL_KEY_USAGE_INCOMPATIBLE" while accessing Red Hat Satellite WebUI after configure custom SSL certificates.
# https://access.redhat.com/solutions/6977733


# create a few variables like "volume_image_file_exists"
- name: Add image facts to hostvars
  hosts: satellite
  become: true
  gather_facts: false
  roles:
    - name: "check for existing images"
      role: nick.platform.libvirt_image_facts
      delegate_to: "{{ groups['hypervisor'][0] }}"


# If there already is an image file, don't trash it. 
- name: Kickstart a new machine
  hosts: satellite
  become: true
  gather_facts: false
  serial: 1
  vars_files:
    - ~/vault-credentials.yml
  pre_tasks:
    - name: "If VM image exists, stop play here"
      meta: end_host
      when: volume_image_file_exists
  roles:
    - name: "kickstart the VM on hypervisor {{ groups['hypervisor'][0] }}"
      role: nick.platform.libvirt_machine_kickstart
      delegate_to: "{{ groups['hypervisor'][0] }}"
  tasks:
    - name: There is now an image file
      set_fact:
        volume_image_file_exists: true


- name: Find and start new server machine
  hosts: satellite
  become: true
  gather_facts: false
  serial: 1
  roles:
    - name: "update /etc/hosts on install host {{ groups['install_host'][0] }}"
      role: nick.platform.hosts_record
      vars:
        h_ip_address: "{{ nics[0]['ip'] }}"
        h_fqdn: "{{ fqdn }}"
        h_host: "{{ host }}"
      delegate_to: "{{ groups['install_host'][0] }}"
    # !!! install_host or hypervisor? 
    - name: "run machine (it stops after install)"
      role: nick.platform.libvirt_machine_start
      delegate_to: "{{ groups['install_host'][0] }}"
      when: volume_image_file_exists


# If there is no base file, assume configuration didn't complete and 
# we are good to go again.
- name: Configure new server machine
  hosts: satellite
  become: true
  gather_facts: false
  serial: 1
  vars_files:
    - ~/vault-credentials.yml
  environment:
    http_proxy: "http://gateway.{{ lab_domain }}:3128"
    HTTPS_PROXY: "http://gateway.{{ lab_domain }}:3128"
    no_proxy: localhost,127.0.0.1,example.com
  #
  pre_tasks:
    - name: "If base image exists, stop play here"
      ansible.builtin.meta: end_host
      when: volume_base_file_exists
    - ansible.builtin.setup:
  #
  roles:
    - role: nick.platform.managed_node
    - name: "update /etc/hosts with gateway address"
      role: nick.platform.hosts_record
      # !!! hardcoded
      vars:
        h_ip_address: "{{ lab_net_prefix }}.3"
        h_fqdn: "gateway.{{ lab_domain }}"
        h_host: gateway
    - role: nick.platform.server_cert
    - role: nick.platform.dns_client_of_id
    - role: nick.platform.dns_record
      vars:
        # remove domain, leave host and maybe subdomain
        # !!! hardcoded
        record_a_name: "{{ inventory_hostname | regex_replace( '.' + lab_domain) }}"
        record_a_value: "{{ nics[0]['ip'] }}"
        # use the last octet only
        record_ptr_name: "{{ nics[0]['ip'].split('.')[3] }}"
        # DNS is fussy about root domain '.'
        record_ptr_value: "{{ inventory_hostname + '.' }}"
    - role: nick.platform.cdn_repo_consumer
      vars:
        server_proxy_hostname: "gateway.{{ lab_domain }}"
        server_proxy_port: 3128
    - role: nick.platform.latest_packages
    - role: nick.platform.insights_client
